{"version":3,"sources":["store/robots.js","store/search.js","store/reducers.js","components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundary.jsx","components/Header.jsx","App.jsx","serviceWorker.js","index.js"],"names":["fetchRobots","robotsSagas","fetchRobotsSucceeded","robots","type","payload","initialState","fetch","result","json","put","call","takeEvery","searchField","combineReducers","fetchRobotsReducer","state","action","isPending","searchRobotsReducer","Card","id","name","email","username","url","className","alt","src","map","r","key","onSearch","aria-label","onChange","placeholder","value","props","style","overflowY","height","children","ErrorBoundary","hasError","error","info","this","setState","React","Component","Header","App","useSelector","dispatch","useDispatch","filtered","filter","toLowerCase","includes","SearchBox","e","target","Scroll","CardList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","sagaMiddleware","createSagaMiddleware","middlewares","ReactDOM","render","StrictMode","store","createStore","rootReducer","applyMiddleware","document","getElementById","run","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1b584a06.chunk.js","sourcesContent":["import { takeEvery, put, call } from 'redux-saga/effects'\n\nconst FETCH_ROBOTS_PENDING = 'FETCH_ROBOTS_PENDING'\nconst FETCH_ROBOTS_SUCCEEDED = 'FETCH_ROBOTS_SUCCEEDED'\nconst FETCH_ROBOTS_FAILED = 'FETCH_ROBOTS_FAILED'\n\nexport const fetchRobotsStart = () => ({\n  type: FETCH_ROBOTS_PENDING,\n})\n\nexport const fetchRobotsSucceeded = (robots) => ({\n  type: FETCH_ROBOTS_SUCCEEDED,\n  payload: robots,\n})\n\nconst fetchRobotsFailed = (error) => ({\n  type: FETCH_ROBOTS_FAILED,\n  payload: error,\n})\n\nconst initialState = {\n  robots: [],\n}\n\n// TODO handle the error somewhere? in errors reducer maybe?\nexport const fetchRobotsReducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case FETCH_ROBOTS_PENDING:\n      return {\n        ...state,\n        isPending: true,\n      }\n    case FETCH_ROBOTS_SUCCEEDED:\n      return {\n        robots: action.payload,\n        isPending: false,\n      }\n    default:\n      return state\n  }\n}\n\nexport function* fetchRobots() {\n  try {\n    const result = yield fetch('https://jsonplaceholder.typicode.com/users')\n    const robots = yield result.json()\n    yield put(fetchRobotsSucceeded(robots))\n  } catch (error) {\n    yield put(fetchRobotsFailed(error))\n  }\n}\n\nexport function* robotsSagas() {\n  yield put(fetchRobotsStart())\n  yield call(fetchRobots)\n  yield takeEvery(FETCH_ROBOTS_PENDING, fetchRobots)\n}\n","export const setSearchField = (text) => ({\n  type: 'SET_SEARCH_FIELD',\n  payload: text,\n})\n\nconst initialState = {\n  searchField: '',\n}\n\nexport const searchRobotsReducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case 'SET_SEARCH_FIELD':\n      return {\n        searchField: action.payload,\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport { fetchRobotsReducer } from './robots'\nimport { searchRobotsReducer } from './search'\n\nexport default combineReducers({ fetchRobotsReducer, searchRobotsReducer })\n","import React from 'react'\n\nconst Card = ({ id, name, username, email }) => {\n  const url = `https://robohash.org/${id}?size=200x200`\n  return (\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robot' src={url} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react'\nimport Card from './Card'\n\nexport default ({ robots }) => (\n  <div>\n    {robots.map((r) => (\n      <Card key={r.id} {...r} />\n    ))}\n  </div>\n)\n","import React from 'react'\n\nexport default ({ onSearch, searchField }) => (\n  <div>\n    <p>You search for: {searchField}</p>\n    <input\n      aria-label='Search Robots'\n      onChange={onSearch}\n      className='pa3 ba b--green bg-lightest-blue'\n      type='search'\n      placeholder='Search for robots'\n      value={searchField}\n    />\n  </div>\n)\n","import React from 'react'\n\nexport default (props) => <div style={{ overflowY: 'scroll', height: '800px' }}>{props.children}</div>\n","import React from 'react'\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hasError: false,\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops, there's something wrong.</h1>\n    } else {\n      return this.props.children\n    }\n  }\n}\n\nexport default ErrorBoundary\n","import React from 'react'\n\nconst Header = () => {\n  return <h1>RoboFriends</h1>\n}\n\nexport default Header\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport CardList from './components/CardList'\nimport SearchBox from './components/SearchBox'\nimport Scroll from './components/Scroll'\nimport ErrorBoundary from './components/ErrorBoundary'\nimport { setSearchField } from './store/search'\nimport Header from './components/Header'\n\nconst App = () => {\n  const robots = useSelector((state) => state.fetchRobotsReducer.robots)\n  const isPending = useSelector((state) => state.fetchRobotsReducer.isPending)\n  const searchField = useSelector((state) => state.searchRobotsReducer.searchField)\n  const dispatch = useDispatch()\n\n  const filtered = robots.filter((r) => r.name.toLowerCase().includes(searchField))\n\n  // TODO might want to fix the two states by just saving the search field state\n  return (\n    <div className='tc'>\n      <Header />\n      <SearchBox onSearch={(e) => dispatch(setSearchField(e.target.value))} searchField={searchField} />\n      <Scroll>\n        <ErrorBoundary>\n          {isPending && <h2>Robots are coming!</h2>}\n          <CardList robots={filtered} />\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducer from './store/reducers'\nimport { robotsSagas } from './store/robots'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'tachyons'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst middlewares = [sagaMiddleware]\n\nif (process.env.NODE_ENV === `development`) {\n  const { logger } = require(`redux-logger`)\n\n  middlewares.push(logger)\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={createStore(rootReducer, applyMiddleware(...middlewares))}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nsagaMiddleware.run(robotsSagas)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}